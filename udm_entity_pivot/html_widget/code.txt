<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
  <head>
    <title>Google SecOps Entity Explorer</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Bootstrap -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />

    <!-- Tabulator-->
    <script
      type="text/javascript"
      src="https://unpkg.com/tabulator-tables@6.3.0/dist/js/tabulator.min.js"
    ></script>

    <!-- Jquery-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <style>
      :root {
        --studioform-library--sf-color--dark-gray-secops-800: #212c45;
        --studioform-library--sf-color--subtle-white: #fbfbfb;
        --studioform-library--sf-color--dark-gray-secops-600: #2f3d5b;
        --studioform-library--sf-color--dark-gray-secops-400: #576a94;
        --studioform-library--sf-color--darker-secops: #161625;
        --studioform-library--sf-color--white: white;
        --studioform-library--sf-color--green: #1a73e8;
        --studioform-library--base-color-neutral--neutral-lightest: #eee;
        --studioform-library--sf-color--light-blue: #b1c9f6;
        --studioform-library--sf-color--light-green: #cffce0;
        --studioform-library--sf-color--red: #dd2d4a;
        --studioform-library--sf-color--tag-blue: #0073e6;
        --studioform-library--sf-color--subtle-black-11: #222;
        --studioform-library--sf-color--blue: #175ada;
        --studioform-library--sf-color--light-red: #fbe5e8;
        --studioform-library--sf-color--subtle-black-50: #22222280;
        --studioform-library--sf-color--subtle-black-10: #2222221a;
        --studioform-library--sf-color--grey: #e9e9e9;
        --studioform-library--sf-color--subtle-black-20: #2223;
        --studioform-library--sf-color--color: white;
        --studioform-library--sf-color--font-family: "Source Sans 3", sans-serif;
        --studioform-library--sf-corner--medium: 0.3125rem;
        --studioform-library--sf-corner--large: 0.625rem;
        --studioform-library--sf-corner--small: 0.15625rem;
      }

      .tabulator-header > .tabulator-header-contents > br {
        display: none;
      }

      .tabulator .tabulator-col-resize-handle {
        display: inline-block;
        margin-left: -3px;
        margin-right: -3px;
        position: relative;
        vertical-align: middle;
        width: 6px;
        z-index: 11;
      }

      @media (hover: hover) and (pointer: fine) {
        .tabulator .tabulator-col-resize-handle:hover {
          cursor: ew-resize;
        }
      }

      .tabulator .tabulator-col-resize-handle:last-of-type {
        margin-right: 0;
        width: 3px;
      }

      .tabulator .tabulator-col-resize-guide {
        background-color: #999;
        height: 100%;
        margin-left: -0.5px;
        opacity: 0.5;
        position: absolute;
        top: 0;
        width: 4px;
      }

      .tabulator
        .tabulator-header
        .tabulator-col.tabulator-sortable
        .tabulator-col-content {
        padding-right: 25px; /* Make space for the sort arrow */
      }

      .tabulator
        .tabulator-header
        .tabulator-col
        .tabulator-col-content
        .tabulator-col-sorter {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .tabulator
        .tabulator-header
        .tabulator-col
        .tabulator-col-content
        .tabulator-col-sorter
        .tabulator-arrow {
        border-left: 6px solid transparent;
        border-right: 6px solid transparent;
        height: 0;
        width: 0;
        opacity: 0.5; /* Dim when not active */
      }

      .tabulator
        .tabulator-header
        .tabulator-col.tabulator-sortable[aria-sort="ascending"]
        .tabulator-col-content
        .tabulator-col-sorter
        .tabulator-arrow {
        border-bottom: 6px solid var(--bs-primary); /* Use a Bootstrap primary color */
        opacity: 1;
      }

      .tabulator
        .tabulator-header
        .tabulator-col.tabulator-sortable[aria-sort="descending"]
        .tabulator-col-content
        .tabulator-col-sorter
        .tabulator-arrow {
        border-top: 6px solid var(--bs-primary); /* Use a Bootstrap primary color */
        opacity: 1;
      }

      .tabulator .tabulator-col-resize-guide {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        width: 1px;
        background-color: var(--bs-primary);
        opacity: 0.7;
        z-index: 1; /* Ensure it's above other elements */
      }

      .tabulator-row.tabulator-selectable:hover {
        background-color: var(--bs-light);
        cursor: pointer;
      }

      /*
      [data-bs-theme="dark"] body {
        background-color: #161627;
      }
      */

      /* Dark theme overrides */
      [data-bs-theme="dark"] .tabulator-row.tabulator-selectable:hover {
        background-color: var(
          --studioform-library--sf-color--dark-gray-secops-600
        ); /* Or another subtle dark color */
      }

      .tabulator-row.tabulator-selected {
        background-color: var(
          --bs-primary-bg-subtle
        ); /* A subtle primary background */
        color: var(--bs-primary-color);
      }

      .tabulator-row.tabulator-group {
        background-color: var(--bs-secondary-bg);
        font-weight: bold;
        padding: 8px 10px;
        border-bottom: 1px solid var(--bs-border-color);
      }

      .tabulator-row.tabulator-group .tabulator-arrow {
        display: inline-block;
        width: 0;
        height: 0;
        border-top: 6px solid transparent;
        border-bottom: 6px solid transparent;
        border-left: 6px solid var(--bs-secondary-color); /* Arrow color */
        margin-right: 5px;
      }

      .tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {
        border-left: 6px solid transparent;
        border-right: 6px solid transparent;
        border-top: 6px solid var(--bs-secondary-color);
      }

      /* Dark theme overrides */
      [data-bs-theme="dark"] .tabulator-row.tabulator-group {
        background-color: var(
          --studioform-library--sf-color--dark-gray-secops-600
        );
        border-bottom-color: var(--bs-border-color-translucent);
      }
      [data-bs-theme="dark"] .tabulator-row.tabulator-group .tabulator-arrow {
        border-left-color: var(
          --bs-body-color
        ); /* Adjust arrow color for dark */
      }
      [data-bs-theme="dark"]
        .tabulator-row.tabulator-group.tabulator-group-visible
        .tabulator-arrow {
        border-top-color: var(
          --bs-body-color
        ); /* Adjust arrow color for dark */
      }

      .tabulator .tabulator-footer .tabulator-paginator {
        text-align: right;
        padding: 5px 10px;
      }

      .tabulator .tabulator-footer .tabulator-page {
        display: inline-block;
        padding: 5px 10px;
        margin: 0 2px;
        border: 1px solid var(--bs-border-color);
        border-radius: var(--bs-border-radius-sm);
        background-color: var(--bs-body-bg);
        color: var(--bs-body-color);
        cursor: pointer;
      }

      .tabulator .tabulator-footer .tabulator-page.active {
        background-color: var(--bs-primary);
        color: var(--bs-white);
        border-color: var(--bs-primary);
      }

      .tabulator .tabulator-footer .tabulator-page:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .tabulator
        .tabulator-footer
        .tabulator-page:hover:not(.active):not(:disabled) {
        background-color: var(--bs-light);
      }

      /* Dark theme overrides for pagination */
      [data-bs-theme="dark"] .tabulator .tabulator-footer .tabulator-page {
        background-color: var(--bs-dark-bg-subtle);
        color: var(--bs-body-color);
        border-color: var(--bs-border-color-translucent);
      }

      [data-bs-theme="dark"]
        .tabulator
        .tabulator-footer
        .tabulator-page.active {
        background-color: var(--bs-primary); /* Keep primary color for active */
        color: var(--bs-white);
        border-color: var(--bs-primary);
      }

      [data-bs-theme="dark"]
        .tabulator
        .tabulator-footer
        .tabulator-page:hover:not(.active):not(:disabled) {
        background-color: var(--bs-dark);
      }

      /* Dark theme overrides */
      [data-bs-theme="dark"] .tabulator-row.tabulator-selected {
        background-color: var(
          --studioform-library--sf-color--dark-gray-secops-00
        ); /* Adjust as needed for dark */
        color: var(--bs-primary-color-rgb);
      }

      /* Dark theme overrides for sort arrows */
      [data-bs-theme="dark"]
        .tabulator
        .tabulator-header
        .tabulator-col.tabulator-sortable[aria-sort="ascending"]
        .tabulator-col-content
        .tabulator-col-sorter
        .tabulator-arrow {
        border-bottom-color: var(
          --bs-primary-light
        ); /* Adjust for dark theme */
      }

      [data-bs-theme="dark"]
        .tabulator
        .tabulator-header
        .tabulator-col.tabulator-sortable[aria-sort="descending"]
        .tabulator-col-content
        .tabulator-col-sorter
        .tabulator-arrow {
        border-top-color: var(--bs-primary-light); /* Adjust for dark theme */
      }

      .tabulator {
        border: 1px solid var(--bs-border-color); /* Keep your existing border */
        font-size: 12px;
        overflow: hidden; /* Keep existing */
        position: relative; /* Keep existing */
        text-align: left; /* Keep existing */
        background-color: var(--bs-body-bg); /* Keep existing */
        color: var(--bs-body-color); /* Keep existing */
        border-radius: 0.2rem; /* Adjust this value to control the roundness */
        align-items: center;
      }

      .tabulator .tabulator-header {
        background-color: var(
          --bs-secondary-bg
        ); /* Use a secondary background */
        border-bottom: 1px solid var(--bs-border-color);
        box-sizing: border-box;
        color: var(--bs-secondary-color); /* Use a secondary text color */
        font-weight: 700;
        overflow: hidden;
        position: relative;
        white-space: nowrap;
        width: 100%;
      }

      .tabulator .tabulator-header .tabulator-col {
        background: transparent; /* Make column header background transparent */
        border-right: 1px solid var(--bs-border-color);
        box-sizing: border-box;
        display: inline-flex;
        flex-direction: column;
        justify-content: flex-start;
        overflow: hidden;
        position: relative;
        text-align: left;
        vertical-align: bottom;
      }

      .tabulator .tabulator-header .tabulator-col .tabulator-col-content {
        box-sizing: border-box;
        padding: 4px;
        position: relative;
      }

      .tabulator
        .tabulator-header
        .tabulator-col
        .tabulator-col-content
        .tabulator-col-title {
        box-sizing: border-box;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 100%;
      }

      .tabulator .tabulator-tableholder {
        overflow: auto;
        position: relative;
        white-space: nowrap;
        width: 100%;
        background-color: var(
          --bs-body-bg
        ); /* Match tableholder to body background */
      }

      .tabulator .tabulator-tableholder .tabulator-table {
        background-color: transparent; /* Make the actual table background transparent */
        color: inherit; /* Inherit text color from parent */
        display: inline-block;
        overflow: visible;
        position: relative;
        white-space: nowrap;
      }

      .tabulator-row {
        background-color: transparent;
        box-sizing: border-box;
        min-height: 24px;
        position: relative;
        border-bottom: 1px solid var(--bs-border-color); /* ADD THIS LINE */
      }

      .tabulator-row.tabulator-row-even {
        background-color: var(--bs-tertiary-bg);
      }

      /* Dark theme overrides */
      [data-bs-theme="dark"] .tabulator-row.tabulator-row-even {
        background-color: #2f3d5b; /* Your first dark color */
      }

      [data-bs-theme="dark"] .tabulator-row.tabulator-row-odd {
        background-color: #212c45; /* Your second dark color */
      }

      [data-bs-theme="dark"] .tabulator-row:hover {
        background-color: #576a94 !important; /* Lighter color on hover */
      }

      /* Dark theme override */
      [data-bs-theme="dark"] .tabulator-row {
        border-bottom-color: var(--bs-border-color-translucent);
      }

      .tabulator-row .tabulator-cell {
        border-right: 1px solid var(--bs-border-color);
        box-sizing: border-box;
        display: inline-block;
        overflow: hidden;
        padding: 10px;
        position: relative;
        text-overflow: ellipsis;
        vertical-align: middle;
        white-space: nowrap;
        align-items: center;
      }

      .tabulator
        .tabulator-header
        .tabulator-col[tabulator-field="rowSelection"]
        .tabulator-col-content {
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .tabulator-footer {
        background-color: var(
          --bs-secondary-bg
        ); /* Use a secondary background */
        border-top: 1px solid var(--bs-border-color);
        color: var(--bs-secondary-color); /* Use a secondary text color */
        font-weight: 700;
        user-select: none;
        white-space: nowrap;
      }

      svg {
        align-self: center;
      }

      .btn {
        font-size: 12px;
      }

      /* Dark theme overrides */
      [data-bs-theme="dark"] .tabulator .tabulator-header {
        background-color: var(
          --studioform-library--sf-color--dark-gray-secops-600
        ); /* A darker background for dark theme */
        color: var(--bs-body-color); /* Revert to body color for contrast */
        border-bottom-color: var(--bs-border-color);
      }

      [data-bs-theme="dark"] .tabulator .tabulator-header .tabulator-col {
        border-right-color: var(--bs-border-color);
      }

      [data-bs-theme="dark"] .tabulator-row.tabulator-row-even {
        background-color: var(
          --studioform-library--sf-color--dark-gray-secops-600
        ); /* Darker even row background */
      }

      [data-bs-theme="dark"] .tabulator-row .tabulator-cell {
        border-right-color: var(--bs-border-color);
      }

      [data-bs-theme="dark"] .tabulator-footer {
        background-color: var(
          --bs-dark-bg-subtle
        ); /* Darker footer background */
        color: var(--bs-body-color); /* Revert to body color for contrast */
        border-top-color: var(--bs-border-color);
      }
    </style>
  </head>
  <body>
    <div class="container-fluid pt-3">
      <div id="entity-table"></div>
      <br />
      <div class="row px-2">
        <div class="col d-flex">
          <div class="dropdown d-flex align-items-center gap-2">
            <p
              class="mb-0"
              data-bs-toggle="tooltip"
              data-bs-html="true"
              data-bs-title="<em>Select multiple Entities to Run a compound UDM Search.</em>"
            >
              Compound Operator:
            </p>
            <button
              class="btn btn-secondary dropdown-toggle"
              type="button"
              id="logicDropdown"
              data-bs-toggle="dropdown"
              aria-expanded="false"
            >
              AND
            </button>
            <ul class="dropdown-menu" aria-labelledby="logicDropdown">
              <li>
                <a class="dropdown-item" href="#" data-logic="AND">AND</a>
              </li>
              <li><a class="dropdown-item" href="#" data-logic="OR">OR</a></li>
            </ul>
            <button
              id="get-selected-rows"
              class="btn btn-success"
              type="button"
            >
              Run &nbsp; <i class="bi bi-box-arrow-up-right"></i>
            </button>
          </div>
        </div>
        <div class="col d-flex justify-content-end">
          <div class="form-check form-switch text-end">
            <input
              class="form-check-input"
              type="checkbox"
              id="darkModeSwitch"
              checked
            />
            <label class="form-check-label" for="darkModeSwitch"
              >Dark Mode</label
            >
          </div>
        </div>
      </div>
      <row class="px-2">&nbsp;</row>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", (event) => {
        const htmlElement = document.documentElement;
        const switchElement = document.getElementById("darkModeSwitch");

        // Set the default theme to dark if no setting is found in local storage
        const currentTheme = localStorage.getItem("bsTheme") || "dark";
        htmlElement.setAttribute("data-bs-theme", currentTheme);
        switchElement.checked = currentTheme === "dark";

        switchElement.addEventListener("change", function () {
          if (this.checked) {
            htmlElement.setAttribute("data-bs-theme", "dark");
            localStorage.setItem("bsTheme", "dark");
          } else {
            htmlElement.setAttribute("data-bs-theme", "light");
            localStorage.setItem("bsTheme", "light");
          }
        });
      });

      // In your JavaScript code
      const getSelectedRowsButton =
        document.getElementById("get-selected-rows");

      getSelectedRowsButton.addEventListener("click", () => {
        const selectedRows = table.getSelectedData();

        // Get the selected logic from the button's text content
        const selectedLogic = document
          .getElementById("logicDropdown")
          .textContent.trim();

        // Get the dropdown menu element
        const dropdownMenu = document.querySelector(".dropdown-menu");
        pivotLink = createUdmLink1(selectedRows, selectedLogic);

        window.open(pivotLink, "_blank");
      });

      // Get the dropdown menu and the button
      const dropdownMenu = document.querySelector(".dropdown-menu");
      const dropdownButton = document.getElementById("logicDropdown");

      // Add an event listener to the dropdown menu
      dropdownMenu.addEventListener("click", (event) => {
        // Prevent default link behavior
        event.preventDefault();

        // Get the selected logic condition
        const selectedLogic = event.target.dataset.logic;

        // Update the button text
        dropdownButton.textContent = selectedLogic;

        // Do something with the selected logic (e.g., update your query builder)
        // console.log("Selected logic:", selectedLogic);
      });

 function createUdmLink1(data, logic) {
     // Handle single row data (backward compatibility)
     if (!Array.isArray(data)) {
       const rowData = data;
       const {
         CreationTime,
         EntityCards: { SourceSystemUrl, Identifier, Type },
       } = rowData;
       
       // Check if the Type is supported
       if (!getQuery(Identifier, Type)) {
            return null; // Return null if not supported. This will hide the button in the table cell
        }
       const queryParam = getQuery(Identifier, Type);
       const { startTimeIso, endTimeIso } = convertTimestamps(
         CreationTime,
         CreationTime
       );
       return createLink(SourceSystemUrl,queryParam, startTimeIso, endTimeIso);
     }
 
     // Handle multiple rows with AND/OR logic
     else {
       let queryParams = [];
       let validRows = []; // Store only valid rows for processing
       for (const row of data) {
         const {
           EntityCards: { Identifier, Type },
         } = row;

         // Check if the type is supported. if not, dont add to the array for URL processing.
         if (getQuery(Identifier,Type)){
            queryParams.push(getQuery(Identifier, Type));
            validRows.push(row)
          }
       }

       if (validRows.length === 0) return null; // If no rows have valid types, dont return a link.

       const combinedQueryParam = queryParams.join(
         logic === "AND" ? " AND " : " OR "
       );
       const firstRow = validRows[0]; // Use the first VALID row data.
       const {
         EntityCards: { SourceSystemUrl },
       } = firstRow;
       const { CreationTime } = firstRow;
       const { startTimeIso, endTimeIso } = convertTimestamps(
         CreationTime,
         CreationTime
       );
       return createLink(
        SourceSystemUrl,
         combinedQueryParam,
         startTimeIso,
         endTimeIso
       );
     }
   }

   function createLink(
    SourceSystemUrl,
    queryParam,
    startTimeIso,
    endTimeIso
   ) {
        const formattedValue = `${SourceSystemUrl}/search?query=${encodeURIComponent(
          queryParam
        )}&startTime=${startTimeIso}&endTime=${endTimeIso}`;
        const link = document.createElement("a");
        link.href = formattedValue;
        link.innerHTML = "Run" + " " + svg_open;
        link.classList.add("btn", "btn-success");
        link.target = "_blank";
        return link;
      }
   
   function getQuery(identifier, entityType) {
     const queryTemplates = {
       ADDRESS: "ip = {{identifier}} nocase",
       DOMAIN: "domain = {{identifier}} nocase",
       HOSTNAME: "hostname = {{identifier}} nocase",
       USERUNIQNAME:
         "( user = {{identifier}} nocase OR email = {{identifier}} nocase )",
       PROCESS: "process_id = {{identifier}} nocase",
       FILENAME: "file_path = {{identifier}} nocase",
       FILEHASH: "hash = {{identifier}} nocase",
     };
 
     const template = queryTemplates[entityType];
 
     if (template) {
       return template.replace(
         /\{\{identifier\}\}/g,
         JSON.stringify(identifier)
       );
     } else {
       return null;  // Return null if the entity type is not supported
     }
   }

      function getQuery(identifier, entityType) {
        const queryTemplates = {
          ADDRESS: "ip = {{identifier}} nocase",
          DOMAIN: "domain = {{identifier}} nocase",
          HOSTNAME: "hostname = {{identifier}} nocase",
          USERUNIQNAME:
            "( user = {{identifier}} nocase OR email = {{identifier}} nocase )",
          PROCESS: "process_id = {{identifier}} nocase",
          FILENAME: "file_path = {{identifier}} nocase",
          FILEHASH: "hash = {{identifier}} nocase",
        };

        const template = queryTemplates[entityType];

        if (template) {
          return template.replace(
            /\{\{identifier\}\}/g,
            JSON.stringify(identifier)
          );
        } else {
          return "";
        }
      }

      function convertTimestamps(oldestTime, latestTime) {
        // Convert timestamps from milliseconds to seconds
        const startTimeSeconds = oldestTime / 1000;
        const endTimeSeconds = latestTime / 1000;

        // Calculate start and end times with 1 day offset
        const startTime = new Date(startTimeSeconds * 1000);
        startTime.setDate(startTime.getDate() - 1); // Subtract 1 day

        let endTime = new Date(endTimeSeconds * 1000); // Use 'let' instead of 'const'
        endTime.setDate(endTime.getDate() + 1); // Add 1 day

        // Ensure end time is not in the future
        const now = new Date();
        endTime = endTime > now ? now : endTime; // Now you can reassign endTime

        // Format timestamps as ISO strings with milliseconds and 'Z' for UTC
        const startTimeIso = startTime.toISOString().replace("+00:00", "Z");
        const endTimeIso = endTime.toISOString().replace("+00:00", "Z");

        return { startTimeIso, endTimeIso };
      }

      // Open in new windows SVG Icon
      const svg_open = `<svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M17.444 17.444H6.555V6.556H12V5H6.555C5.692 5 5 5.7 5 6.556v10.888C5 18.3 5.692 19 6.555 19h10.889c.855 0 1.555-.7 1.555-1.556V12h-1.555v5.444z"></path><path d="M13.556 5v1.556h2.792L8.703 14.2l1.096 1.097 7.646-7.646v2.792H19V5h-5.444z"></path></svg>`;

    function createUdmLink(cell, formatterParams, onRendered) {
         const rowData = cell.getRow().getData();
         const {
           CreationTime,
           EntityCards: { SourceSystemUrl, Identifier, Type },
         } = rowData;
        
         // Check if the Type is supported
         if (!getQuery(Identifier, Type)) {
            return ""; // Return an empty string if the Type is not supported. This will hide the button in the table cell
        }
     
         const queryParam = getQuery(Identifier, Type);
     
         // Directly use CreationTime for both start and end times
         const { startTimeIso, endTimeIso } = convertTimestamps(
           CreationTime,
           CreationTime
         );
     
        return createLink(SourceSystemUrl, queryParam, startTimeIso, endTimeIso);
       }

       function getQuery(identifier, entityType) {
         const queryTemplates = {
           ADDRESS: "ip = {{identifier}} nocase",
           DOMAIN: "domain = {{identifier}} nocase",
           HOSTNAME: "hostname = {{identifier}} nocase",
           USERUNIQNAME:
             "( user = {{identifier}} nocase OR email = {{identifier}} nocase )",
           PROCESS: "process_id = {{identifier}} nocase",
           FILENAME: "file_path = {{identifier}} nocase",
           FILEHASH: "hash = {{identifier}} nocase",
         };
     
         const template = queryTemplates[entityType];
     
         if (template) {
           return template.replace(
             /\{\{identifier\}\}/g,
             JSON.stringify(identifier)
           );
         } else {
           return null;  // Return null if the entity type is not supported
         }
       }


      function createRlsLink(cell, formatterParams, onRendered) {
        const rowData = cell.getRow().getData();
        const {
          CreationTime,
          EntityCards: { SourceSystemUrl, Identifier },
        } = rowData;

        // Directly use CreationTime for both start and end times
        const { startTimeIso, endTimeIso } = convertTimestamps(
          CreationTime,
          CreationTime
        );

        const formattedValue = `${SourceSystemUrl}/search?query=raw%20%3D%20%2F%28%3Fi%29${encodeURIComponent(
          JSON.stringify(Identifier).slice(1, -1).replace(/\\/g, '\\\\')
        )}%2F&startTime=${startTimeIso}&endTime=${endTimeIso}`;

        const link = document.createElement("a");
        link.href = formattedValue;
        link.target = "_blank";
        link.rel = "noopener noreferrer";
        link.innerHTML = "Run" + " " + svg_open;
        link.classList.add("btn", "btn-primary");
        link.target = "_blank";

        return link;
      }

      function buildJsonObject(filter) {
        const entitiesIdentifier =
          String.raw`[Entity.Identifier]`.split(
            ","
          );
        const entitiesType =
          "[Entity.Type]".split(
            ","
          );
        const entitiesInternal = "[Entity.IsInternalAsset]".split(
          ","
        );
        const entitiesSuspicious =
          "[Entity.IsSuspicious]".split(",");
        const entitiesPivot = "[Entity.IsPivot]".split(
          ","
        );
        const entitiesManual = "[Entity.IsManuallyCreated]".split(
          ","
        );
        const secopsUrl = "https://go-preview-americas-sdl.backstory.chronicle.security";

        const date = new Date("[Alert.CreationTime]");

        // Get the timestamp in milliseconds
        const timestampMilis = date.getTime(); //* 1000;

        return entitiesIdentifier
          .map((identifier, index) => ({
            EntityCards: {
              Identifier: identifier,
              IsInternalAsset: entitiesInternal[index],
              IsPivot: entitiesPivot[index],
              IsSuspicious: entitiesSuspicious[index],
              Type: entitiesType[index],
              SourceSystemUrl: secopsUrl,
              IsManuallyCreated: entitiesManual[index],
            },
            CreationTime: timestampMilis,
          }))
          .filter((item) => !filter.includes(item.EntityCards.Type));
      }

      const filter = ["THREAT", "THREATSIGNATURE", "EMAILSUBJECT"];
      const jsonObject = JSON.stringify(buildJsonObject(filter));

      // Parse the JSON string
      var tabledata = JSON.parse(jsonObject);

      var table = new Tabulator("#entity-table", {
          data: tabledata,
          className: "my-tabulator-table",
          layout: "fitColumns",
          rowHeader: {
              headerSort: false,
              resizable: true,
              frozen: true,
              headerHozAlign: "center",
              hozAlign: "center",
              formatter: "rowSelection",
              titleFormatter: "rowSelection",
              cellClick: function (e, cell) {
                  cell.getRow().toggleSelect();
              },
              width: 40
          },
          columns: [
              {
                  title: "Identifier",
                  field: "EntityCards.Identifier",
                  widthGrow: 4,
                  formatter: function (cell, formatterParams, onRendered) {
                      return (
                          "<div style='overflow-x: auto;'>" +
                          cell.getValue() +
                          "</div>"
                      );
                  },
              },
              { title: "Type", field: "EntityCards.Type" },
              {
                  title: "UDM",
                  field: "combined",
                  hozAlign: "center",
                  formatter: createUdmLink,
              },
              {
                  title: "RLS",
                  field: "combined",
                  hozAlign: "center",
                  formatter: createRlsLink,
              },
              {
                  title: "Suspicious",
                  field: "EntityCards.IsSuspicious",
                  formatter: "tickCross",
                  hozAlign: "center",
              },
              {
                  title: "Pivot",
                  field: "EntityCards.IsPivot",
                  formatter: "tickCross",
                  hozAlign: "center",
              },
              {
                  title: "Internal",
                  field: "EntityCards.IsInternal",
                  formatter: "tickCross",
                  hozAlign: "center",
              },
              {
                  title: "Created Manually",
                  field: "EntityCards.IsManuallyCreated",
                  formatter: "tickCross",
                  hozAlign: "center",
              },
          ],
      });

      const tooltipTriggerList = document.querySelectorAll(
        '[data-bs-toggle="tooltip"]'
      );
      const tooltipList = [...tooltipTriggerList].map(
        (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)
      );
    </script>
  </body>
</html>
